{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["counter","labels","MapContainer","props","onMapClicked","map","event","place","id","toString","name","position","latLng","handleAdd","onRemove","marker","handleRemove","state","initialCenter","places","length","lat","lng","calculated","polyline","google","this","zoom","containerStyle","style","clickableIcons","onClick","index","key","label","fillColor","fillOpacity","path","x","strokeColor","strokeOpacity","strokeWeight","React","Component","width","height","GoogleApiWrapper","apiKey","App","setState","warningOpen","concat","findIndex","newState","slice","splice","handleModeChange","mode","transportationMode","value","handleWarningClose","componentDidMount","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","onCalculate","positionArray","window","maps","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","response","status","calculateRoundtrip","console","log","keys","adj","Array","i","rows","elements","element","duration","permutations","permute","permutation","unshift","push","minCost","Number","MAX_SAFE_INTEGER","minIndex","cost","calculatePathCost","pop","result","origin","destination","k","p","c","fill","onClear","className","Grid","container","justify","spacing","item","xs","sm","FormControl","fullWidth","InputLabel","Select","labelId","onChange","MenuItem","Button","variant","color","disabled","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAIIA,G,MAAU,GACRC,EAAS,6BAEFC,EAAb,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAQVC,aAAe,SAACD,EAAOE,EAAKC,GACxB,IAAIC,EAAQ,CACRC,GAAIR,EAAQS,WACZC,KAAMV,EAAQS,WACdE,SAAUL,EAAMM,QAEpBZ,IACA,EAAKG,MAAMU,UAAUN,IAhBN,EAmBnBO,SAAW,SAACX,EAAOY,GACf,EAAKZ,MAAMa,aAAaD,EAAOL,OAlB/B,EAAKO,MAAQ,CACTC,cAAef,EAAMgB,OAAOC,OAAS,EAAIjB,EAAMgB,OAAO,GAAGR,SAAW,CAAEU,IAAK,SAAUC,IAAK,SAC1FC,WAAYpB,EAAMoB,WAClBC,SAAU,IALC,EADvB,sEAwBc,IAAD,OACL,OACI,kBAAC,MAAD,CACIC,OAAQC,KAAKvB,MAAMsB,OACnBE,KAAM,GACNC,eAAgBC,EAChBC,gBAAgB,EAChBZ,cAAeQ,KAAKT,MAAMC,cAC1Ba,QAASL,KAAKtB,cAEbsB,KAAKvB,MAAMgB,OAAOd,KAAI,SAACE,EAAOyB,GAAR,OACnB,kBAAC,SAAD,CACIC,IAAK1B,EAAMC,GACXE,KAAMH,EAAMG,KACZC,SAAUJ,EAAMI,SAChBoB,QAAS,EAAKjB,SACdoB,MAAOjC,EAAO+B,EAAQ/B,EAAOmB,aAGrC,kBAAC,WAAD,CACIe,UAAU,UACVC,YAAa,IACbC,KAAMX,KAAKvB,MAAMoB,WAAaG,KAAKvB,MAAMgB,OAAOd,KAAI,SAAAiC,GAAC,OAAIA,EAAE3B,YAAY,GACvE4B,YAAY,UACZC,cAAe,GACfC,aAAc,SAjDlC,GAAkCC,IAAMC,WAwDlCd,EAAQ,CACVe,MAAO,OACPC,OAAQ,MACRlC,SAAU,YAGCmC,6BAAiB,CAC5BC,OAAQ,2CADGD,CAEZ5C,G,mGCxDkB8C,E,YACjB,WAAY7C,GAAQ,IAAD,8BACf,4CAAMA,KASVU,UAAY,SAACN,GACwB,IAA7B,EAAKU,MAAME,OAAOC,OAClB,EAAK6B,UAAS,SAAAhC,GAAK,MAAK,CACpBiC,aAAa,MAGjB,EAAKD,UAAS,SAAAhC,GAAK,MAAK,CACpBE,OAAQF,EAAME,OAAOgC,OAAO,CAAC5C,SAjBtB,EAsBnBS,aAAe,SAACiB,GACZ,IAAMD,EAAQ,EAAKf,MAAME,OAAOiC,WAAU,SAAAd,GAAC,OAAIA,EAAE9B,KAAOyB,KACxD,GAAID,GAAS,EAAG,CAEZ,IAAMqB,EAAW,EAAKpC,MAAME,OAAOmC,QACnCD,EAASE,OAAOvB,EAAO,GACvB,EAAKiB,UAAS,SAAAhC,GAAK,MAAK,CACpBE,OAAQkC,QA7BD,EAkCnBG,iBAAmB,SAAClD,EAAOmD,GACvB,EAAKR,UAAS,SAAAhC,GAAK,MAAK,CACpByC,mBAAoBD,EAAKtD,MAAMwD,WApCpB,EAwCnBC,mBAAqB,WACjB,EAAKX,UAAS,SAAAhC,GAAK,MAAK,CACpBiC,aAAa,OA1CF,EA8CnBW,kBAAoB,WACZC,UAAUC,aACVD,UAAUC,YAAYC,oBAAmB,SAACrD,GACtC,IAIMJ,EAAQ,CAAEC,GAAI,IAAKE,KAAM,IAAKC,SAJ1B,CACNU,IAAKV,EAASsD,OAAOC,SACrB5C,IAAKX,EAASsD,OAAOE,YAGzB,EAAKtD,UAAUN,OAtDR,EA2DnB6D,YAAc,WACV,IAAMC,EAAgB,EAAKpD,MAAME,OAAOd,KAAI,SAAAE,GAAK,OAAIA,EAAMI,aAC3C,IAAI2D,OAAO7C,OAAO8C,KAAKC,uBAC/BC,kBACJ,CACIC,QAASL,EACTM,aAAcN,EACdO,WAAY,EAAK3D,MAAMyC,qBACxB,SAACmB,EAAUC,GACK,OAAXA,EACA,EAAKC,mBAAmBF,GAExBG,QAAQC,IAAIH,OAvET,EA6EnBC,mBAAqB,SAACF,GAKlB,IAHA,IAAMzD,EAAS,EAAKH,MAAME,OAAOC,OAC3BD,EAAS,YAAI,EAAKF,MAAME,OAAO+D,QAAQ5B,MAAM,GAC/C6B,EAAM,IAAIC,MAAMhE,GACXiE,EAAI,EAAGA,EAAIjE,EAAQiE,IACxBF,EAAIE,GAAKR,EAASS,KAAKD,GAAGE,SAASlF,KAAI,SAAAmF,GAAO,OAAIA,EAAQC,SAAS9B,SAKvE,IAAI+B,EAAe,EAAKC,QAAQxE,GAChCuE,EAAarF,KAAI,SAAAuF,GAAW,OAAIA,EAAYC,QAAQ,MACpDH,EAAarF,KAAI,SAAAuF,GAAW,OAAIA,EAAYE,KAAK,MACjD,IAAIC,EAAUC,OAAOC,iBACjBC,EAAW,EACf,IAASb,EAAI,EAAGA,EAAIK,EAAatE,OAAQiE,IAAK,CAC1C,IAAMc,EAAO,EAAKC,kBAAkBV,EAAaL,GAAIF,GACjDgB,EAAOJ,IACPA,EAAUI,EACVD,EAAWb,GAInB,IAAIhD,EAAOqD,EAAaQ,GAAU7F,KAAI,SAAAgF,GAAC,OAAI,EAAKpE,MAAME,OAAOkE,MAC7DhD,EAAKgE,MACL,EAAKpD,UAAS,SAAAhC,GAAK,MAAK,CACpBM,YAAY,EACZJ,OAAQkB,OAzGG,EA6GnB+D,kBAAoB,SAAC/D,EAAM8C,GAEvB,IADA,IAAImB,EAAS,EACJjB,EAAI,EAAGA,EAAIhD,EAAKjB,OAAS,EAAGiE,IAAK,CACtC,IAAIkB,EAASlE,EAAKgD,GACdmB,EAAcnE,EAAKgD,EAAI,GAC3BiB,GAAUnB,EAAIoB,GAAQC,GAE1B,OAAOF,GApHQ,EAyHnBX,QAAU,SAACC,GAMP,IALA,IAGWa,EAAGC,EAHVtF,EAASwE,EAAYxE,OACrBkF,EAAS,CAACV,EAAYtC,SACtBqD,EAAI,IAAIvB,MAAMhE,GAAQwF,KAAK,GAC3BvB,EAAI,EAEDA,EAAIjE,GACHuF,EAAEtB,GAAKA,GACPoB,EAAIpB,EAAI,GAAKsB,EAAEtB,GACfqB,EAAId,EAAYP,GAChBO,EAAYP,GAAKO,EAAYa,GAC7Bb,EAAYa,GAAKC,IACfC,EAAEtB,GACJA,EAAI,EACJiB,EAAOR,KAAKF,EAAYtC,WAExBqD,EAAEtB,GAAK,IACLA,GAGV,OAAOiB,GA7IQ,EAgJnBO,QAAU,WACN,EAAK5D,UAAS,SAAAhC,GAAK,MAAK,CACpBE,OAAQ,GACRI,YAAY,OAjJhB,EAAKN,MAAQ,CACTE,OAAQ,GACRuC,mBAAoB,UACpBR,aAAa,EACb3B,YAAY,GAND,E,sEAwJf,OACI,yBAAKuF,UAAU,OACX,6DACA,4FAEA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASH,UAAU,eAAeI,QAAS,GAC/D,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClB,kBAACC,EAAA,EAAD,CAAaC,UAAU,QACvB,kBAACC,EAAA,EAAD,CAAYhH,GAAG,gBAAf,0BACA,kBAACiH,EAAA,EAAD,CACIC,QAAQ,eACRlH,GAAG,cACHmD,MAAOjC,KAAKT,MAAMyC,mBAClBiE,SAAUjG,KAAK8B,kBAEf,kBAACoE,EAAA,EAAD,CAAUjE,MAAM,WAAhB,WACA,kBAACiE,EAAA,EAAD,CAAUjE,MAAM,aAAhB,aACA,kBAACiE,EAAA,EAAD,CAAUjE,MAAM,WAAhB,kBACA,kBAACiE,EAAA,EAAD,CAAUjE,MAAM,WAAhB,cAIR,kBAACoD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,GACtC,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACU,EAAA,EAAD,CACIC,QAAQ,YACRC,MAAM,UACNhG,QAASL,KAAK0C,aAEb1C,KAAKT,MAAMM,WAAa,cAAgB,cAGjD,kBAACwF,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACU,EAAA,EAAD,CACIC,QAAQ,YACRC,MAAM,UACNhG,QAASL,KAAKmF,QACdmB,UAAWtG,KAAKT,MAAME,SAAW,IAJrC,YAWZ,kBAAC4F,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,kBAAC,EAAD,CACIvG,UAAWa,KAAKb,UAChBG,aAAcU,KAAKV,aACnBG,OAAQO,KAAKT,MAAME,OACnBI,WAAYG,KAAKT,MAAMM,eAOnC,kBAAC0G,EAAA,EAAD,CACIC,KAAMxG,KAAKT,MAAMiC,YACjBiF,QAASzG,KAAKkC,mBACdwE,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAACC,EAAA,EAAD,CAAa9H,GAAG,sBAAsB,qCACtC,kBAAC+H,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAmBhI,GAAG,4BAAtB,kHAIJ,kBAACiI,EAAA,EAAD,KACI,kBAACZ,EAAA,EAAD,CAAQ9F,QAASL,KAAKkC,mBAAoBmE,MAAM,WAAhD,gB,GA/NSrF,IAAMC,WCHnB+F,QACW,cAA7BpE,OAAOqE,SAASC,UAEe,UAA7BtE,OAAOqE,SAASC,UAEhBtE,OAAOqE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBnF,WACrBA,UAAUoF,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.10bf209d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Map, GoogleApiWrapper, Marker, Polyline } from 'google-maps-react'\r\nimport './Map.css'\r\n\r\nvar counter = 1;\r\nconst labels = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n\r\nexport class MapContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            initialCenter: props.places.length > 0 ? props.places[0].position : { lat: 49.01386, lng: 8.41965 },\r\n            calculated: props.calculated,\r\n            polyline: []\r\n        }\r\n    }\r\n\r\n    onMapClicked = (props, map, event) => {\r\n        var place = {\r\n            id: counter.toString(),\r\n            name: counter.toString(),\r\n            position: event.latLng\r\n        }\r\n        counter++;\r\n        this.props.handleAdd(place);\r\n    }\r\n\r\n    onRemove = (props, marker) => {\r\n        this.props.handleRemove(marker.name);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Map\r\n                google={this.props.google}\r\n                zoom={15}\r\n                containerStyle={style}\r\n                clickableIcons={true}\r\n                initialCenter={this.state.initialCenter}\r\n                onClick={this.onMapClicked}\r\n            >\r\n                {this.props.places.map((place, index) => (\r\n                    <Marker\r\n                        key={place.id}\r\n                        name={place.name}\r\n                        position={place.position}\r\n                        onClick={this.onRemove}\r\n                        label={labels[index % labels.length]}\r\n                    />\r\n                ))}\r\n                <Polyline\r\n                    fillColor=\"#0000FF\"\r\n                    fillOpacity={0.35}\r\n                    path={this.props.calculated ? this.props.places.map(x => x.position) : []}\r\n                    strokeColor=\"#0000FF\"\r\n                    strokeOpacity={0.8}\r\n                    strokeWeight={2}\r\n                />\r\n            </Map>\r\n        );\r\n    }\r\n}\r\n\r\nconst style = {\r\n    width: '100%',\r\n    height: '67%',\r\n    position: 'absolute'\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyB56Buw0gtaZzwgFsErJDlZPSxrKvdihCs'\r\n})(MapContainer);","import React from 'react';\nimport './App.css';\nimport MapContainer from './Map.js'\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Grid } from '@material-ui/core';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            places: [],\n            transportationMode: \"WALKING\",\n            warningOpen: false,\n            calculated: false\n        }\n    }\n\n    handleAdd = (place) => {\n        if (this.state.places.length === 9) {\n            this.setState(state => ({\n                warningOpen: true\n            }))\n        } else {\n            this.setState(state => ({\n                places: state.places.concat([place])\n            }));\n        }\n    }\n\n    handleRemove = (key) => {\n        const index = this.state.places.findIndex(x => x.id === key)\n        if (index > -1) {\n            //copy array and set array with removed element as new state\n            const newState = this.state.places.slice();\n            newState.splice(index, 1);\n            this.setState(state => ({\n                places: newState\n            }));\n        }\n    }\n\n    handleModeChange = (event, mode) => {\n        this.setState(state => ({\n            transportationMode: mode.props.value\n        }));\n    }\n\n    handleWarningClose = () => {\n        this.setState(state => ({\n            warningOpen: false\n        }))\n    }\n\n    componentDidMount = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                var pos = {\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude\n                };\n                const place = { id: \"0\", name: \"0\", position: pos }\n                this.handleAdd(place);\n            });\n        }\n    }\n\n    onCalculate = () => {\n        const positionArray = this.state.places.map(place => place.position)\n        const service = new window.google.maps.DistanceMatrixService();\n        service.getDistanceMatrix(\n            {\n                origins: positionArray,\n                destinations: positionArray,\n                travelMode: this.state.transportationMode\n            }, (response, status) => {\n                if (status === \"OK\") {\n                    this.calculateRoundtrip(response);\n                } else {\n                    console.log(status);\n                }\n            }\n        )\n    }\n\n    calculateRoundtrip = (response) => {\n        //build adjacency matrix of travel durations from response\n        const length = this.state.places.length;\n        const places = [...this.state.places.keys()].slice(1)\n        var adj = new Array(length);\n        for (var i = 0; i < length; i++) {\n            adj[i] = response.rows[i].elements.map(element => element.duration.value);\n        }\n        //naive O(n!) algorithm:\n        //1. find all permutations of roundtrip paths\n        //2. run through all of them to find the one with the lowest cost\n        var permutations = this.permute(places);\n        permutations.map(permutation => permutation.unshift(0));\n        permutations.map(permutation => permutation.push(0));\n        var minCost = Number.MAX_SAFE_INTEGER;\n        var minIndex = 0;\n        for (var i = 0; i < permutations.length; i++) {\n            const cost = this.calculatePathCost(permutations[i], adj);\n            if (cost < minCost) {\n                minCost = cost;\n                minIndex = i;\n            }\n        }\n\n        var path = permutations[minIndex].map(i => this.state.places[i]);\n        path.pop();\n        this.setState(state => ({\n            calculated: true,\n            places: path\n        }))\n    }\n\n    calculatePathCost = (path, adj) => {\n        var result = 0;\n        for (var i = 0; i < path.length - 1; i++) {\n            var origin = path[i];\n            var destination = path[i + 1];\n            result += adj[origin][destination];\n        }\n        return result;\n    }\n\n    //https://stackoverflow.com/questions/9960908/permutations-in-javascript/37580979#37580979\n    //calculates all permutations of an array\n    permute = (permutation) => {\n        var length = permutation.length,\n            result = [permutation.slice()],\n            c = new Array(length).fill(0),\n            i = 1, k, p;\n\n        while (i < length) {\n            if (c[i] < i) {\n                k = i % 2 && c[i];\n                p = permutation[i];\n                permutation[i] = permutation[k];\n                permutation[k] = p;\n                ++c[i];\n                i = 1;\n                result.push(permutation.slice());\n            } else {\n                c[i] = 0;\n                ++i;\n            }\n        }\n        return result;\n    }\n\n    onClear = () => {\n        this.setState(state => ({\n            places: [],\n            calculated: false\n        }))\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Shortest Roundtrip Calculator</h1>\n                <h3>Click on the map to select up to nine places you want to go.</h3>\n\n                <Grid container justify='center' className='classes.root' spacing={2}>\n                    <Grid item xs={6} sm={2}>\n                        <FormControl fullWidth='true'>\n                        <InputLabel id=\"select-label\">Mode of transportation</InputLabel>\n                        <Select\n                            labelId=\"select-label\"\n                            id=\"mode-select\"\n                            value={this.state.transportationMode}\n                            onChange={this.handleModeChange}\n                        >\n                            <MenuItem value=\"WALKING\">Walking</MenuItem>\n                            <MenuItem value=\"BICYCLING\">Bicycling</MenuItem>\n                            <MenuItem value=\"TRANSIT\">Public Transit</MenuItem>\n                            <MenuItem value=\"DRIVING\">Driving</MenuItem>\n                        </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container justify='center' spacing={2}>\n                            <Grid item>\n                                <Button \n                                    variant=\"contained\" \n                                    color=\"primary\" \n                                    onClick={this.onCalculate}\n                                >\n                                    {this.state.calculated ? 'Recalculate' : 'Calculate'}\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button \n                                    variant=\"contained\" \n                                    color=\"primary\" \n                                    onClick={this.onClear}\n                                    disabled={!this.state.places === []}\n                                >\n                                    Clear\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <MapContainer\n                            handleAdd={this.handleAdd}\n                            handleRemove={this.handleRemove}\n                            places={this.state.places}\n                            calculated={this.state.calculated}\n                        />\n                    </Grid>\n                </Grid>\n\n                \n\n                <Dialog\n                    open={this.state.warningOpen}\n                    onClose={this.handleWarningClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">{\"Maximum number of places exceeded\"}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            Due to limitations of the free version of the Google Maps API the maximum number of places available is nine.\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleWarningClose} color=\"primary\">\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}